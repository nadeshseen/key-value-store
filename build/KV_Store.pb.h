// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KV_Store.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_KV_5fStore_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_KV_5fStore_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_KV_5fStore_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_KV_5fStore_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_KV_5fStore_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_KV_5fStore_2eproto_metadata_getter(int index);
namespace kv_store {
class Join_Request;
struct Join_RequestDefaultTypeInternal;
extern Join_RequestDefaultTypeInternal _Join_Request_default_instance_;
class KV_Reply;
struct KV_ReplyDefaultTypeInternal;
extern KV_ReplyDefaultTypeInternal _KV_Reply_default_instance_;
class KV_Request;
struct KV_RequestDefaultTypeInternal;
extern KV_RequestDefaultTypeInternal _KV_Request_default_instance_;
}  // namespace kv_store
PROTOBUF_NAMESPACE_OPEN
template<> ::kv_store::Join_Request* Arena::CreateMaybeMessage<::kv_store::Join_Request>(Arena*);
template<> ::kv_store::KV_Reply* Arena::CreateMaybeMessage<::kv_store::KV_Reply>(Arena*);
template<> ::kv_store::KV_Request* Arena::CreateMaybeMessage<::kv_store::KV_Request>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace kv_store {

// ===================================================================

class Join_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kv_store.Join_Request) */ {
 public:
  inline Join_Request() : Join_Request(nullptr) {}
  virtual ~Join_Request();
  explicit constexpr Join_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Join_Request(const Join_Request& from);
  Join_Request(Join_Request&& from) noexcept
    : Join_Request() {
    *this = ::std::move(from);
  }

  inline Join_Request& operator=(const Join_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Join_Request& operator=(Join_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Join_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const Join_Request* internal_default_instance() {
    return reinterpret_cast<const Join_Request*>(
               &_Join_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Join_Request& a, Join_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Join_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Join_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Join_Request* New() const final {
    return CreateMaybeMessage<Join_Request>(nullptr);
  }

  Join_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Join_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Join_Request& from);
  void MergeFrom(const Join_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Join_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kv_store.Join_Request";
  }
  protected:
  explicit Join_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_KV_5fStore_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPortFieldNumber = 1,
    kIdFieldNumber = 2,
    kTargetPortFieldNumber = 3,
    kTypeFieldNumber = 4,
    kListFieldNumber = 5,
  };
  // string port = 1;
  void clear_port();
  const std::string& port() const;
  void set_port(const std::string& value);
  void set_port(std::string&& value);
  void set_port(const char* value);
  void set_port(const char* value, size_t size);
  std::string* mutable_port();
  std::string* release_port();
  void set_allocated_port(std::string* port);
  private:
  const std::string& _internal_port() const;
  void _internal_set_port(const std::string& value);
  std::string* _internal_mutable_port();
  public:

  // string id = 2;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string target_port = 3;
  void clear_target_port();
  const std::string& target_port() const;
  void set_target_port(const std::string& value);
  void set_target_port(std::string&& value);
  void set_target_port(const char* value);
  void set_target_port(const char* value, size_t size);
  std::string* mutable_target_port();
  std::string* release_target_port();
  void set_allocated_target_port(std::string* target_port);
  private:
  const std::string& _internal_target_port() const;
  void _internal_set_target_port(const std::string& value);
  std::string* _internal_mutable_target_port();
  public:

  // string type = 4;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string list = 5;
  void clear_list();
  const std::string& list() const;
  void set_list(const std::string& value);
  void set_list(std::string&& value);
  void set_list(const char* value);
  void set_list(const char* value, size_t size);
  std::string* mutable_list();
  std::string* release_list();
  void set_allocated_list(std::string* list);
  private:
  const std::string& _internal_list() const;
  void _internal_set_list(const std::string& value);
  std::string* _internal_mutable_list();
  public:

  // @@protoc_insertion_point(class_scope:kv_store.Join_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr port_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_port_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_KV_5fStore_2eproto;
};
// -------------------------------------------------------------------

class KV_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kv_store.KV_Request) */ {
 public:
  inline KV_Request() : KV_Request(nullptr) {}
  virtual ~KV_Request();
  explicit constexpr KV_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KV_Request(const KV_Request& from);
  KV_Request(KV_Request&& from) noexcept
    : KV_Request() {
    *this = ::std::move(from);
  }

  inline KV_Request& operator=(const KV_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline KV_Request& operator=(KV_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KV_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const KV_Request* internal_default_instance() {
    return reinterpret_cast<const KV_Request*>(
               &_KV_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(KV_Request& a, KV_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(KV_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KV_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KV_Request* New() const final {
    return CreateMaybeMessage<KV_Request>(nullptr);
  }

  KV_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KV_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KV_Request& from);
  void MergeFrom(const KV_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KV_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kv_store.KV_Request";
  }
  protected:
  explicit KV_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_KV_5fStore_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
    kTypeFieldNumber = 3,
    kClientIdFieldNumber = 4,
    kPortNoFieldNumber = 5,
    kPathFieldNumber = 6,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // string type = 3;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string client_id = 4;
  void clear_client_id();
  const std::string& client_id() const;
  void set_client_id(const std::string& value);
  void set_client_id(std::string&& value);
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  std::string* mutable_client_id();
  std::string* release_client_id();
  void set_allocated_client_id(std::string* client_id);
  private:
  const std::string& _internal_client_id() const;
  void _internal_set_client_id(const std::string& value);
  std::string* _internal_mutable_client_id();
  public:

  // string port_no = 5;
  void clear_port_no();
  const std::string& port_no() const;
  void set_port_no(const std::string& value);
  void set_port_no(std::string&& value);
  void set_port_no(const char* value);
  void set_port_no(const char* value, size_t size);
  std::string* mutable_port_no();
  std::string* release_port_no();
  void set_allocated_port_no(std::string* port_no);
  private:
  const std::string& _internal_port_no() const;
  void _internal_set_port_no(const std::string& value);
  std::string* _internal_mutable_port_no();
  public:

  // string path = 6;
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // @@protoc_insertion_point(class_scope:kv_store.KV_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr port_no_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_KV_5fStore_2eproto;
};
// -------------------------------------------------------------------

class KV_Reply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kv_store.KV_Reply) */ {
 public:
  inline KV_Reply() : KV_Reply(nullptr) {}
  virtual ~KV_Reply();
  explicit constexpr KV_Reply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KV_Reply(const KV_Reply& from);
  KV_Reply(KV_Reply&& from) noexcept
    : KV_Reply() {
    *this = ::std::move(from);
  }

  inline KV_Reply& operator=(const KV_Reply& from) {
    CopyFrom(from);
    return *this;
  }
  inline KV_Reply& operator=(KV_Reply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KV_Reply& default_instance() {
    return *internal_default_instance();
  }
  static inline const KV_Reply* internal_default_instance() {
    return reinterpret_cast<const KV_Reply*>(
               &_KV_Reply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(KV_Reply& a, KV_Reply& b) {
    a.Swap(&b);
  }
  inline void Swap(KV_Reply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KV_Reply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KV_Reply* New() const final {
    return CreateMaybeMessage<KV_Reply>(nullptr);
  }

  KV_Reply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KV_Reply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KV_Reply& from);
  void MergeFrom(const KV_Reply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KV_Reply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kv_store.KV_Reply";
  }
  protected:
  explicit KV_Reply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_KV_5fStore_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
    kStatusCodeFieldNumber = 2,
    kErrorMessageFieldNumber = 3,
    kSuccessorPortFieldNumber = 4,
    kSuccessorIdFieldNumber = 5,
    kIdFieldNumber = 6,
    kListFieldNumber = 7,
    kPredecessorPortFieldNumber = 8,
    kPredecessorIdFieldNumber = 9,
  };
  // string message = 1;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // string status_code = 2;
  void clear_status_code();
  const std::string& status_code() const;
  void set_status_code(const std::string& value);
  void set_status_code(std::string&& value);
  void set_status_code(const char* value);
  void set_status_code(const char* value, size_t size);
  std::string* mutable_status_code();
  std::string* release_status_code();
  void set_allocated_status_code(std::string* status_code);
  private:
  const std::string& _internal_status_code() const;
  void _internal_set_status_code(const std::string& value);
  std::string* _internal_mutable_status_code();
  public:

  // string error_message = 3;
  void clear_error_message();
  const std::string& error_message() const;
  void set_error_message(const std::string& value);
  void set_error_message(std::string&& value);
  void set_error_message(const char* value);
  void set_error_message(const char* value, size_t size);
  std::string* mutable_error_message();
  std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);
  private:
  const std::string& _internal_error_message() const;
  void _internal_set_error_message(const std::string& value);
  std::string* _internal_mutable_error_message();
  public:

  // string successor_port = 4;
  void clear_successor_port();
  const std::string& successor_port() const;
  void set_successor_port(const std::string& value);
  void set_successor_port(std::string&& value);
  void set_successor_port(const char* value);
  void set_successor_port(const char* value, size_t size);
  std::string* mutable_successor_port();
  std::string* release_successor_port();
  void set_allocated_successor_port(std::string* successor_port);
  private:
  const std::string& _internal_successor_port() const;
  void _internal_set_successor_port(const std::string& value);
  std::string* _internal_mutable_successor_port();
  public:

  // string successor_id = 5;
  void clear_successor_id();
  const std::string& successor_id() const;
  void set_successor_id(const std::string& value);
  void set_successor_id(std::string&& value);
  void set_successor_id(const char* value);
  void set_successor_id(const char* value, size_t size);
  std::string* mutable_successor_id();
  std::string* release_successor_id();
  void set_allocated_successor_id(std::string* successor_id);
  private:
  const std::string& _internal_successor_id() const;
  void _internal_set_successor_id(const std::string& value);
  std::string* _internal_mutable_successor_id();
  public:

  // string id = 6;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string list = 7;
  void clear_list();
  const std::string& list() const;
  void set_list(const std::string& value);
  void set_list(std::string&& value);
  void set_list(const char* value);
  void set_list(const char* value, size_t size);
  std::string* mutable_list();
  std::string* release_list();
  void set_allocated_list(std::string* list);
  private:
  const std::string& _internal_list() const;
  void _internal_set_list(const std::string& value);
  std::string* _internal_mutable_list();
  public:

  // string predecessor_port = 8;
  void clear_predecessor_port();
  const std::string& predecessor_port() const;
  void set_predecessor_port(const std::string& value);
  void set_predecessor_port(std::string&& value);
  void set_predecessor_port(const char* value);
  void set_predecessor_port(const char* value, size_t size);
  std::string* mutable_predecessor_port();
  std::string* release_predecessor_port();
  void set_allocated_predecessor_port(std::string* predecessor_port);
  private:
  const std::string& _internal_predecessor_port() const;
  void _internal_set_predecessor_port(const std::string& value);
  std::string* _internal_mutable_predecessor_port();
  public:

  // string predecessor_id = 9;
  void clear_predecessor_id();
  const std::string& predecessor_id() const;
  void set_predecessor_id(const std::string& value);
  void set_predecessor_id(std::string&& value);
  void set_predecessor_id(const char* value);
  void set_predecessor_id(const char* value, size_t size);
  std::string* mutable_predecessor_id();
  std::string* release_predecessor_id();
  void set_allocated_predecessor_id(std::string* predecessor_id);
  private:
  const std::string& _internal_predecessor_id() const;
  void _internal_set_predecessor_id(const std::string& value);
  std::string* _internal_mutable_predecessor_id();
  public:

  // @@protoc_insertion_point(class_scope:kv_store.KV_Reply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr successor_port_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr successor_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr predecessor_port_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr predecessor_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_KV_5fStore_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Join_Request

// string port = 1;
inline void Join_Request::clear_port() {
  port_.ClearToEmpty();
}
inline const std::string& Join_Request::port() const {
  // @@protoc_insertion_point(field_get:kv_store.Join_Request.port)
  return _internal_port();
}
inline void Join_Request::set_port(const std::string& value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:kv_store.Join_Request.port)
}
inline std::string* Join_Request::mutable_port() {
  // @@protoc_insertion_point(field_mutable:kv_store.Join_Request.port)
  return _internal_mutable_port();
}
inline const std::string& Join_Request::_internal_port() const {
  return port_.Get();
}
inline void Join_Request::_internal_set_port(const std::string& value) {
  
  port_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Join_Request::set_port(std::string&& value) {
  
  port_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kv_store.Join_Request.port)
}
inline void Join_Request::set_port(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  port_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:kv_store.Join_Request.port)
}
inline void Join_Request::set_port(const char* value,
    size_t size) {
  
  port_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kv_store.Join_Request.port)
}
inline std::string* Join_Request::_internal_mutable_port() {
  
  return port_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Join_Request::release_port() {
  // @@protoc_insertion_point(field_release:kv_store.Join_Request.port)
  return port_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Join_Request::set_allocated_port(std::string* port) {
  if (port != nullptr) {
    
  } else {
    
  }
  port_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), port,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kv_store.Join_Request.port)
}

// string id = 2;
inline void Join_Request::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Join_Request::id() const {
  // @@protoc_insertion_point(field_get:kv_store.Join_Request.id)
  return _internal_id();
}
inline void Join_Request::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:kv_store.Join_Request.id)
}
inline std::string* Join_Request::mutable_id() {
  // @@protoc_insertion_point(field_mutable:kv_store.Join_Request.id)
  return _internal_mutable_id();
}
inline const std::string& Join_Request::_internal_id() const {
  return id_.Get();
}
inline void Join_Request::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Join_Request::set_id(std::string&& value) {
  
  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kv_store.Join_Request.id)
}
inline void Join_Request::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:kv_store.Join_Request.id)
}
inline void Join_Request::set_id(const char* value,
    size_t size) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kv_store.Join_Request.id)
}
inline std::string* Join_Request::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Join_Request::release_id() {
  // @@protoc_insertion_point(field_release:kv_store.Join_Request.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Join_Request::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kv_store.Join_Request.id)
}

// string target_port = 3;
inline void Join_Request::clear_target_port() {
  target_port_.ClearToEmpty();
}
inline const std::string& Join_Request::target_port() const {
  // @@protoc_insertion_point(field_get:kv_store.Join_Request.target_port)
  return _internal_target_port();
}
inline void Join_Request::set_target_port(const std::string& value) {
  _internal_set_target_port(value);
  // @@protoc_insertion_point(field_set:kv_store.Join_Request.target_port)
}
inline std::string* Join_Request::mutable_target_port() {
  // @@protoc_insertion_point(field_mutable:kv_store.Join_Request.target_port)
  return _internal_mutable_target_port();
}
inline const std::string& Join_Request::_internal_target_port() const {
  return target_port_.Get();
}
inline void Join_Request::_internal_set_target_port(const std::string& value) {
  
  target_port_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Join_Request::set_target_port(std::string&& value) {
  
  target_port_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kv_store.Join_Request.target_port)
}
inline void Join_Request::set_target_port(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  target_port_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:kv_store.Join_Request.target_port)
}
inline void Join_Request::set_target_port(const char* value,
    size_t size) {
  
  target_port_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kv_store.Join_Request.target_port)
}
inline std::string* Join_Request::_internal_mutable_target_port() {
  
  return target_port_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Join_Request::release_target_port() {
  // @@protoc_insertion_point(field_release:kv_store.Join_Request.target_port)
  return target_port_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Join_Request::set_allocated_target_port(std::string* target_port) {
  if (target_port != nullptr) {
    
  } else {
    
  }
  target_port_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target_port,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kv_store.Join_Request.target_port)
}

// string type = 4;
inline void Join_Request::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& Join_Request::type() const {
  // @@protoc_insertion_point(field_get:kv_store.Join_Request.type)
  return _internal_type();
}
inline void Join_Request::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:kv_store.Join_Request.type)
}
inline std::string* Join_Request::mutable_type() {
  // @@protoc_insertion_point(field_mutable:kv_store.Join_Request.type)
  return _internal_mutable_type();
}
inline const std::string& Join_Request::_internal_type() const {
  return type_.Get();
}
inline void Join_Request::_internal_set_type(const std::string& value) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Join_Request::set_type(std::string&& value) {
  
  type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kv_store.Join_Request.type)
}
inline void Join_Request::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:kv_store.Join_Request.type)
}
inline void Join_Request::set_type(const char* value,
    size_t size) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kv_store.Join_Request.type)
}
inline std::string* Join_Request::_internal_mutable_type() {
  
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Join_Request::release_type() {
  // @@protoc_insertion_point(field_release:kv_store.Join_Request.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Join_Request::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kv_store.Join_Request.type)
}

// string list = 5;
inline void Join_Request::clear_list() {
  list_.ClearToEmpty();
}
inline const std::string& Join_Request::list() const {
  // @@protoc_insertion_point(field_get:kv_store.Join_Request.list)
  return _internal_list();
}
inline void Join_Request::set_list(const std::string& value) {
  _internal_set_list(value);
  // @@protoc_insertion_point(field_set:kv_store.Join_Request.list)
}
inline std::string* Join_Request::mutable_list() {
  // @@protoc_insertion_point(field_mutable:kv_store.Join_Request.list)
  return _internal_mutable_list();
}
inline const std::string& Join_Request::_internal_list() const {
  return list_.Get();
}
inline void Join_Request::_internal_set_list(const std::string& value) {
  
  list_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Join_Request::set_list(std::string&& value) {
  
  list_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kv_store.Join_Request.list)
}
inline void Join_Request::set_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  list_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:kv_store.Join_Request.list)
}
inline void Join_Request::set_list(const char* value,
    size_t size) {
  
  list_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kv_store.Join_Request.list)
}
inline std::string* Join_Request::_internal_mutable_list() {
  
  return list_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Join_Request::release_list() {
  // @@protoc_insertion_point(field_release:kv_store.Join_Request.list)
  return list_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Join_Request::set_allocated_list(std::string* list) {
  if (list != nullptr) {
    
  } else {
    
  }
  list_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), list,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kv_store.Join_Request.list)
}

// -------------------------------------------------------------------

// KV_Request

// string key = 1;
inline void KV_Request::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& KV_Request::key() const {
  // @@protoc_insertion_point(field_get:kv_store.KV_Request.key)
  return _internal_key();
}
inline void KV_Request::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:kv_store.KV_Request.key)
}
inline std::string* KV_Request::mutable_key() {
  // @@protoc_insertion_point(field_mutable:kv_store.KV_Request.key)
  return _internal_mutable_key();
}
inline const std::string& KV_Request::_internal_key() const {
  return key_.Get();
}
inline void KV_Request::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KV_Request::set_key(std::string&& value) {
  
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kv_store.KV_Request.key)
}
inline void KV_Request::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:kv_store.KV_Request.key)
}
inline void KV_Request::set_key(const char* value,
    size_t size) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kv_store.KV_Request.key)
}
inline std::string* KV_Request::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KV_Request::release_key() {
  // @@protoc_insertion_point(field_release:kv_store.KV_Request.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KV_Request::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kv_store.KV_Request.key)
}

// string value = 2;
inline void KV_Request::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& KV_Request::value() const {
  // @@protoc_insertion_point(field_get:kv_store.KV_Request.value)
  return _internal_value();
}
inline void KV_Request::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:kv_store.KV_Request.value)
}
inline std::string* KV_Request::mutable_value() {
  // @@protoc_insertion_point(field_mutable:kv_store.KV_Request.value)
  return _internal_mutable_value();
}
inline const std::string& KV_Request::_internal_value() const {
  return value_.Get();
}
inline void KV_Request::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KV_Request::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kv_store.KV_Request.value)
}
inline void KV_Request::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:kv_store.KV_Request.value)
}
inline void KV_Request::set_value(const char* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kv_store.KV_Request.value)
}
inline std::string* KV_Request::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KV_Request::release_value() {
  // @@protoc_insertion_point(field_release:kv_store.KV_Request.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KV_Request::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kv_store.KV_Request.value)
}

// string type = 3;
inline void KV_Request::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& KV_Request::type() const {
  // @@protoc_insertion_point(field_get:kv_store.KV_Request.type)
  return _internal_type();
}
inline void KV_Request::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:kv_store.KV_Request.type)
}
inline std::string* KV_Request::mutable_type() {
  // @@protoc_insertion_point(field_mutable:kv_store.KV_Request.type)
  return _internal_mutable_type();
}
inline const std::string& KV_Request::_internal_type() const {
  return type_.Get();
}
inline void KV_Request::_internal_set_type(const std::string& value) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KV_Request::set_type(std::string&& value) {
  
  type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kv_store.KV_Request.type)
}
inline void KV_Request::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:kv_store.KV_Request.type)
}
inline void KV_Request::set_type(const char* value,
    size_t size) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kv_store.KV_Request.type)
}
inline std::string* KV_Request::_internal_mutable_type() {
  
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KV_Request::release_type() {
  // @@protoc_insertion_point(field_release:kv_store.KV_Request.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KV_Request::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kv_store.KV_Request.type)
}

// string client_id = 4;
inline void KV_Request::clear_client_id() {
  client_id_.ClearToEmpty();
}
inline const std::string& KV_Request::client_id() const {
  // @@protoc_insertion_point(field_get:kv_store.KV_Request.client_id)
  return _internal_client_id();
}
inline void KV_Request::set_client_id(const std::string& value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:kv_store.KV_Request.client_id)
}
inline std::string* KV_Request::mutable_client_id() {
  // @@protoc_insertion_point(field_mutable:kv_store.KV_Request.client_id)
  return _internal_mutable_client_id();
}
inline const std::string& KV_Request::_internal_client_id() const {
  return client_id_.Get();
}
inline void KV_Request::_internal_set_client_id(const std::string& value) {
  
  client_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KV_Request::set_client_id(std::string&& value) {
  
  client_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kv_store.KV_Request.client_id)
}
inline void KV_Request::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:kv_store.KV_Request.client_id)
}
inline void KV_Request::set_client_id(const char* value,
    size_t size) {
  
  client_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kv_store.KV_Request.client_id)
}
inline std::string* KV_Request::_internal_mutable_client_id() {
  
  return client_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KV_Request::release_client_id() {
  // @@protoc_insertion_point(field_release:kv_store.KV_Request.client_id)
  return client_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KV_Request::set_allocated_client_id(std::string* client_id) {
  if (client_id != nullptr) {
    
  } else {
    
  }
  client_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kv_store.KV_Request.client_id)
}

// string port_no = 5;
inline void KV_Request::clear_port_no() {
  port_no_.ClearToEmpty();
}
inline const std::string& KV_Request::port_no() const {
  // @@protoc_insertion_point(field_get:kv_store.KV_Request.port_no)
  return _internal_port_no();
}
inline void KV_Request::set_port_no(const std::string& value) {
  _internal_set_port_no(value);
  // @@protoc_insertion_point(field_set:kv_store.KV_Request.port_no)
}
inline std::string* KV_Request::mutable_port_no() {
  // @@protoc_insertion_point(field_mutable:kv_store.KV_Request.port_no)
  return _internal_mutable_port_no();
}
inline const std::string& KV_Request::_internal_port_no() const {
  return port_no_.Get();
}
inline void KV_Request::_internal_set_port_no(const std::string& value) {
  
  port_no_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KV_Request::set_port_no(std::string&& value) {
  
  port_no_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kv_store.KV_Request.port_no)
}
inline void KV_Request::set_port_no(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  port_no_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:kv_store.KV_Request.port_no)
}
inline void KV_Request::set_port_no(const char* value,
    size_t size) {
  
  port_no_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kv_store.KV_Request.port_no)
}
inline std::string* KV_Request::_internal_mutable_port_no() {
  
  return port_no_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KV_Request::release_port_no() {
  // @@protoc_insertion_point(field_release:kv_store.KV_Request.port_no)
  return port_no_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KV_Request::set_allocated_port_no(std::string* port_no) {
  if (port_no != nullptr) {
    
  } else {
    
  }
  port_no_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), port_no,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kv_store.KV_Request.port_no)
}

// string path = 6;
inline void KV_Request::clear_path() {
  path_.ClearToEmpty();
}
inline const std::string& KV_Request::path() const {
  // @@protoc_insertion_point(field_get:kv_store.KV_Request.path)
  return _internal_path();
}
inline void KV_Request::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:kv_store.KV_Request.path)
}
inline std::string* KV_Request::mutable_path() {
  // @@protoc_insertion_point(field_mutable:kv_store.KV_Request.path)
  return _internal_mutable_path();
}
inline const std::string& KV_Request::_internal_path() const {
  return path_.Get();
}
inline void KV_Request::_internal_set_path(const std::string& value) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KV_Request::set_path(std::string&& value) {
  
  path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kv_store.KV_Request.path)
}
inline void KV_Request::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:kv_store.KV_Request.path)
}
inline void KV_Request::set_path(const char* value,
    size_t size) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kv_store.KV_Request.path)
}
inline std::string* KV_Request::_internal_mutable_path() {
  
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KV_Request::release_path() {
  // @@protoc_insertion_point(field_release:kv_store.KV_Request.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KV_Request::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kv_store.KV_Request.path)
}

// -------------------------------------------------------------------

// KV_Reply

// string message = 1;
inline void KV_Reply::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& KV_Reply::message() const {
  // @@protoc_insertion_point(field_get:kv_store.KV_Reply.message)
  return _internal_message();
}
inline void KV_Reply::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:kv_store.KV_Reply.message)
}
inline std::string* KV_Reply::mutable_message() {
  // @@protoc_insertion_point(field_mutable:kv_store.KV_Reply.message)
  return _internal_mutable_message();
}
inline const std::string& KV_Reply::_internal_message() const {
  return message_.Get();
}
inline void KV_Reply::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KV_Reply::set_message(std::string&& value) {
  
  message_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kv_store.KV_Reply.message)
}
inline void KV_Reply::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:kv_store.KV_Reply.message)
}
inline void KV_Reply::set_message(const char* value,
    size_t size) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kv_store.KV_Reply.message)
}
inline std::string* KV_Reply::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KV_Reply::release_message() {
  // @@protoc_insertion_point(field_release:kv_store.KV_Reply.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KV_Reply::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kv_store.KV_Reply.message)
}

// string status_code = 2;
inline void KV_Reply::clear_status_code() {
  status_code_.ClearToEmpty();
}
inline const std::string& KV_Reply::status_code() const {
  // @@protoc_insertion_point(field_get:kv_store.KV_Reply.status_code)
  return _internal_status_code();
}
inline void KV_Reply::set_status_code(const std::string& value) {
  _internal_set_status_code(value);
  // @@protoc_insertion_point(field_set:kv_store.KV_Reply.status_code)
}
inline std::string* KV_Reply::mutable_status_code() {
  // @@protoc_insertion_point(field_mutable:kv_store.KV_Reply.status_code)
  return _internal_mutable_status_code();
}
inline const std::string& KV_Reply::_internal_status_code() const {
  return status_code_.Get();
}
inline void KV_Reply::_internal_set_status_code(const std::string& value) {
  
  status_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KV_Reply::set_status_code(std::string&& value) {
  
  status_code_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kv_store.KV_Reply.status_code)
}
inline void KV_Reply::set_status_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:kv_store.KV_Reply.status_code)
}
inline void KV_Reply::set_status_code(const char* value,
    size_t size) {
  
  status_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kv_store.KV_Reply.status_code)
}
inline std::string* KV_Reply::_internal_mutable_status_code() {
  
  return status_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KV_Reply::release_status_code() {
  // @@protoc_insertion_point(field_release:kv_store.KV_Reply.status_code)
  return status_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KV_Reply::set_allocated_status_code(std::string* status_code) {
  if (status_code != nullptr) {
    
  } else {
    
  }
  status_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kv_store.KV_Reply.status_code)
}

// string error_message = 3;
inline void KV_Reply::clear_error_message() {
  error_message_.ClearToEmpty();
}
inline const std::string& KV_Reply::error_message() const {
  // @@protoc_insertion_point(field_get:kv_store.KV_Reply.error_message)
  return _internal_error_message();
}
inline void KV_Reply::set_error_message(const std::string& value) {
  _internal_set_error_message(value);
  // @@protoc_insertion_point(field_set:kv_store.KV_Reply.error_message)
}
inline std::string* KV_Reply::mutable_error_message() {
  // @@protoc_insertion_point(field_mutable:kv_store.KV_Reply.error_message)
  return _internal_mutable_error_message();
}
inline const std::string& KV_Reply::_internal_error_message() const {
  return error_message_.Get();
}
inline void KV_Reply::_internal_set_error_message(const std::string& value) {
  
  error_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KV_Reply::set_error_message(std::string&& value) {
  
  error_message_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kv_store.KV_Reply.error_message)
}
inline void KV_Reply::set_error_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:kv_store.KV_Reply.error_message)
}
inline void KV_Reply::set_error_message(const char* value,
    size_t size) {
  
  error_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kv_store.KV_Reply.error_message)
}
inline std::string* KV_Reply::_internal_mutable_error_message() {
  
  return error_message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KV_Reply::release_error_message() {
  // @@protoc_insertion_point(field_release:kv_store.KV_Reply.error_message)
  return error_message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KV_Reply::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    
  } else {
    
  }
  error_message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kv_store.KV_Reply.error_message)
}

// string successor_port = 4;
inline void KV_Reply::clear_successor_port() {
  successor_port_.ClearToEmpty();
}
inline const std::string& KV_Reply::successor_port() const {
  // @@protoc_insertion_point(field_get:kv_store.KV_Reply.successor_port)
  return _internal_successor_port();
}
inline void KV_Reply::set_successor_port(const std::string& value) {
  _internal_set_successor_port(value);
  // @@protoc_insertion_point(field_set:kv_store.KV_Reply.successor_port)
}
inline std::string* KV_Reply::mutable_successor_port() {
  // @@protoc_insertion_point(field_mutable:kv_store.KV_Reply.successor_port)
  return _internal_mutable_successor_port();
}
inline const std::string& KV_Reply::_internal_successor_port() const {
  return successor_port_.Get();
}
inline void KV_Reply::_internal_set_successor_port(const std::string& value) {
  
  successor_port_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KV_Reply::set_successor_port(std::string&& value) {
  
  successor_port_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kv_store.KV_Reply.successor_port)
}
inline void KV_Reply::set_successor_port(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  successor_port_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:kv_store.KV_Reply.successor_port)
}
inline void KV_Reply::set_successor_port(const char* value,
    size_t size) {
  
  successor_port_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kv_store.KV_Reply.successor_port)
}
inline std::string* KV_Reply::_internal_mutable_successor_port() {
  
  return successor_port_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KV_Reply::release_successor_port() {
  // @@protoc_insertion_point(field_release:kv_store.KV_Reply.successor_port)
  return successor_port_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KV_Reply::set_allocated_successor_port(std::string* successor_port) {
  if (successor_port != nullptr) {
    
  } else {
    
  }
  successor_port_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), successor_port,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kv_store.KV_Reply.successor_port)
}

// string successor_id = 5;
inline void KV_Reply::clear_successor_id() {
  successor_id_.ClearToEmpty();
}
inline const std::string& KV_Reply::successor_id() const {
  // @@protoc_insertion_point(field_get:kv_store.KV_Reply.successor_id)
  return _internal_successor_id();
}
inline void KV_Reply::set_successor_id(const std::string& value) {
  _internal_set_successor_id(value);
  // @@protoc_insertion_point(field_set:kv_store.KV_Reply.successor_id)
}
inline std::string* KV_Reply::mutable_successor_id() {
  // @@protoc_insertion_point(field_mutable:kv_store.KV_Reply.successor_id)
  return _internal_mutable_successor_id();
}
inline const std::string& KV_Reply::_internal_successor_id() const {
  return successor_id_.Get();
}
inline void KV_Reply::_internal_set_successor_id(const std::string& value) {
  
  successor_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KV_Reply::set_successor_id(std::string&& value) {
  
  successor_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kv_store.KV_Reply.successor_id)
}
inline void KV_Reply::set_successor_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  successor_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:kv_store.KV_Reply.successor_id)
}
inline void KV_Reply::set_successor_id(const char* value,
    size_t size) {
  
  successor_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kv_store.KV_Reply.successor_id)
}
inline std::string* KV_Reply::_internal_mutable_successor_id() {
  
  return successor_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KV_Reply::release_successor_id() {
  // @@protoc_insertion_point(field_release:kv_store.KV_Reply.successor_id)
  return successor_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KV_Reply::set_allocated_successor_id(std::string* successor_id) {
  if (successor_id != nullptr) {
    
  } else {
    
  }
  successor_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), successor_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kv_store.KV_Reply.successor_id)
}

// string id = 6;
inline void KV_Reply::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& KV_Reply::id() const {
  // @@protoc_insertion_point(field_get:kv_store.KV_Reply.id)
  return _internal_id();
}
inline void KV_Reply::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:kv_store.KV_Reply.id)
}
inline std::string* KV_Reply::mutable_id() {
  // @@protoc_insertion_point(field_mutable:kv_store.KV_Reply.id)
  return _internal_mutable_id();
}
inline const std::string& KV_Reply::_internal_id() const {
  return id_.Get();
}
inline void KV_Reply::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KV_Reply::set_id(std::string&& value) {
  
  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kv_store.KV_Reply.id)
}
inline void KV_Reply::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:kv_store.KV_Reply.id)
}
inline void KV_Reply::set_id(const char* value,
    size_t size) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kv_store.KV_Reply.id)
}
inline std::string* KV_Reply::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KV_Reply::release_id() {
  // @@protoc_insertion_point(field_release:kv_store.KV_Reply.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KV_Reply::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kv_store.KV_Reply.id)
}

// string list = 7;
inline void KV_Reply::clear_list() {
  list_.ClearToEmpty();
}
inline const std::string& KV_Reply::list() const {
  // @@protoc_insertion_point(field_get:kv_store.KV_Reply.list)
  return _internal_list();
}
inline void KV_Reply::set_list(const std::string& value) {
  _internal_set_list(value);
  // @@protoc_insertion_point(field_set:kv_store.KV_Reply.list)
}
inline std::string* KV_Reply::mutable_list() {
  // @@protoc_insertion_point(field_mutable:kv_store.KV_Reply.list)
  return _internal_mutable_list();
}
inline const std::string& KV_Reply::_internal_list() const {
  return list_.Get();
}
inline void KV_Reply::_internal_set_list(const std::string& value) {
  
  list_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KV_Reply::set_list(std::string&& value) {
  
  list_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kv_store.KV_Reply.list)
}
inline void KV_Reply::set_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  list_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:kv_store.KV_Reply.list)
}
inline void KV_Reply::set_list(const char* value,
    size_t size) {
  
  list_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kv_store.KV_Reply.list)
}
inline std::string* KV_Reply::_internal_mutable_list() {
  
  return list_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KV_Reply::release_list() {
  // @@protoc_insertion_point(field_release:kv_store.KV_Reply.list)
  return list_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KV_Reply::set_allocated_list(std::string* list) {
  if (list != nullptr) {
    
  } else {
    
  }
  list_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), list,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kv_store.KV_Reply.list)
}

// string predecessor_port = 8;
inline void KV_Reply::clear_predecessor_port() {
  predecessor_port_.ClearToEmpty();
}
inline const std::string& KV_Reply::predecessor_port() const {
  // @@protoc_insertion_point(field_get:kv_store.KV_Reply.predecessor_port)
  return _internal_predecessor_port();
}
inline void KV_Reply::set_predecessor_port(const std::string& value) {
  _internal_set_predecessor_port(value);
  // @@protoc_insertion_point(field_set:kv_store.KV_Reply.predecessor_port)
}
inline std::string* KV_Reply::mutable_predecessor_port() {
  // @@protoc_insertion_point(field_mutable:kv_store.KV_Reply.predecessor_port)
  return _internal_mutable_predecessor_port();
}
inline const std::string& KV_Reply::_internal_predecessor_port() const {
  return predecessor_port_.Get();
}
inline void KV_Reply::_internal_set_predecessor_port(const std::string& value) {
  
  predecessor_port_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KV_Reply::set_predecessor_port(std::string&& value) {
  
  predecessor_port_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kv_store.KV_Reply.predecessor_port)
}
inline void KV_Reply::set_predecessor_port(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  predecessor_port_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:kv_store.KV_Reply.predecessor_port)
}
inline void KV_Reply::set_predecessor_port(const char* value,
    size_t size) {
  
  predecessor_port_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kv_store.KV_Reply.predecessor_port)
}
inline std::string* KV_Reply::_internal_mutable_predecessor_port() {
  
  return predecessor_port_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KV_Reply::release_predecessor_port() {
  // @@protoc_insertion_point(field_release:kv_store.KV_Reply.predecessor_port)
  return predecessor_port_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KV_Reply::set_allocated_predecessor_port(std::string* predecessor_port) {
  if (predecessor_port != nullptr) {
    
  } else {
    
  }
  predecessor_port_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), predecessor_port,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kv_store.KV_Reply.predecessor_port)
}

// string predecessor_id = 9;
inline void KV_Reply::clear_predecessor_id() {
  predecessor_id_.ClearToEmpty();
}
inline const std::string& KV_Reply::predecessor_id() const {
  // @@protoc_insertion_point(field_get:kv_store.KV_Reply.predecessor_id)
  return _internal_predecessor_id();
}
inline void KV_Reply::set_predecessor_id(const std::string& value) {
  _internal_set_predecessor_id(value);
  // @@protoc_insertion_point(field_set:kv_store.KV_Reply.predecessor_id)
}
inline std::string* KV_Reply::mutable_predecessor_id() {
  // @@protoc_insertion_point(field_mutable:kv_store.KV_Reply.predecessor_id)
  return _internal_mutable_predecessor_id();
}
inline const std::string& KV_Reply::_internal_predecessor_id() const {
  return predecessor_id_.Get();
}
inline void KV_Reply::_internal_set_predecessor_id(const std::string& value) {
  
  predecessor_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KV_Reply::set_predecessor_id(std::string&& value) {
  
  predecessor_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kv_store.KV_Reply.predecessor_id)
}
inline void KV_Reply::set_predecessor_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  predecessor_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:kv_store.KV_Reply.predecessor_id)
}
inline void KV_Reply::set_predecessor_id(const char* value,
    size_t size) {
  
  predecessor_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kv_store.KV_Reply.predecessor_id)
}
inline std::string* KV_Reply::_internal_mutable_predecessor_id() {
  
  return predecessor_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KV_Reply::release_predecessor_id() {
  // @@protoc_insertion_point(field_release:kv_store.KV_Reply.predecessor_id)
  return predecessor_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KV_Reply::set_allocated_predecessor_id(std::string* predecessor_id) {
  if (predecessor_id != nullptr) {
    
  } else {
    
  }
  predecessor_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), predecessor_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kv_store.KV_Reply.predecessor_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace kv_store

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_KV_5fStore_2eproto
